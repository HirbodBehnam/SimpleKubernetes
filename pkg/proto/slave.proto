syntax = "proto3";
package proto;

import "google/protobuf/empty.proto";
import "pkg/proto/shared.proto";

option go_package = "WLF/pkg/proto";

message MasterToSlaveRequest {
  oneof request {
    google.protobuf.Empty ping = 1;
    google.protobuf.Empty getTop = 2;
    SlaveNewJobRequest newJob = 3;
    GetJobLogsRequest getJobLogs = 4;
  }
}

message SlaveNewJobRequest {
  UUID id = 1;
  NewJobMessage newJob = 2;
}

message SlaveToMasterRequest {
  oneof request {
    SlaveHello hello = 1;
    JobFinishedResult jobFinished = 2;
  }
}

message SlaveHello {
  // How should master connect to slave
  string connect_address = 1;
}

// Message sent to slave after SlaveHello
message SlaveHelloMasterAck {
  // Slave ID
  uint32 id = 1;
}

// Sent after NewJobMessage is sent to client
message SlaveJobAck {
  oneof result {
    google.protobuf.Empty ack = 1; // sent if job was ok and now it's running!
    google.protobuf.Empty insufficient_resource = 2; // sent if slave couldn't run the job. The resource which is insufficient is sent in as data
    google.protobuf.Empty tasks_full = 3; // sent if slave couldn't run the job because all of allowed tasks are full.
  }
}

message JobFinishedResult {
  uint32 slave_id = 1;
  UUID job_id = 2;
  oneof status {
    sint32 exit_code = 3;
    string run_error = 4;
  }
}

// Sent from master to slave after SlaveHello
message SlaveIDAssigned {
  uint32 slave_id = 1;
}